

1： taskkill /pid xxx /f 强制关闭pid为xxx的进程
         tskill xxx      关闭xxx进程
         tasklist       显示进程及其pid码

TASKKILL [/S system [/U username [/P [password]]]] 
{ [/FI filter] [/PID processid | /IM imagename] } [/F] [/T] 

描述: 
这个命令行工具可用来结束至少一个进程。 
可以根据进程 id 或图像名来结束进程。 

参数列表: 
/S system 指定要连接到的远程系统。 

/U [domain\]user 指定应该在哪个用户上下文 
执行这个命令。 

/P [password] 为提供的用户上下文指定 
密码。如果忽略，提示输入。 

/F 指定要强行终止 
进程。 

/FI filter 指定筛选进或筛选出查询的 
的任务。 

/PID process id 指定要终止的进程的 
PID。 

/IM image name 指定要终止的进程的 
图像名。通配符 '*' 
可用来指定所有图像名。 

/T Tree kill: 终止指定的进程 
和任何由此启动的子进程。 

/? 显示帮助/用法。 

筛选器: 
筛选器名 有效运算符 有效值 
----------- --------------- -------------- 
STATUS eq, ne 运行 | 没有响应 
IMAGENAME eq, ne 图像名 
PID eq, ne, gt, lt, ge, le PID 值 
SESSION eq, ne, gt, lt, ge, le 会话编号 
CPUTIME eq, ne, gt, lt, ge, le CPU 时间，格式为 
hh:mm:ss。 
hh - 时， 
mm - 钟，ss - 秒 
MEMUSAGE eq, ne, gt, lt, ge, le 内存使用，单位为 KB 
USERNAME eq, ne 用户名，格式为 
[domain\]user 
MODULES eq, ne DLL 名 
SERVICES eq, ne 服务名 
WINDOWTITLE eq, ne 窗口标题 

注意: 只有带有筛选器的情况下，才能跟 /IM 切换使用通配符 '*'。 

注意: 远程进程总是要强行终止， 
不管是否指定了 /F 选项。 

例如: 
TASKKILL /S system /F /IM notepad.exe /T 
TASKKILL /PID 1230 /PID 1241 /PID 1253 /T 
TASKKILL /F /IM notepad.exe /IM mspaint.exe 
TASKKILL /F /FI "PID ge 1000" /FI "WINDOWTITLE ne untitle*" 
TASKKILL /F /FI "USERNAME eq NT AUTHORITY\SYSTEM" /IM notepad.exe 
TASKKILL /S system /U domain\username /FI "USERNAME ne NT*" /IM * 
TASKKILL /S system /U username /P password /FI "IMAGENAME eq note*" 

2：

运行－输入“ntsd -c q -p pid” (pid是进程标识符，打开方式 任务管理器－查看－选择列－进程标识符 v) 

实际应用代码
-------------------
TASKKILL /F /IM RalidParking.exe 
TASKKILL /F /fi "STATUS eq NOT RESPONDING" /im  RalidParking.exe 








        public void QueryActiveLog()
        {
            // Query two different event logs using a structured query.
            string queryString =
                  "<QueryList>"
                 + " <Query Id=\"0\" Path=\"Application\">"
                 +   " <Select Path=\"Application\">*[System[(Level=2) and (EventID=1000) "
                 +   "  and TimeCreated[timediff(@SystemTime) &lt;= 604800000]]]</Select>"
                 + "</Query>"
                 + "</QueryList>";
 
            EventLogQuery eventsQuery = new EventLogQuery("Application", PathType.LogName, queryString);
            EventLogReader logReader = new EventLogReader(eventsQuery);
 
            // Display event info

            this.listBox1.Items.Clear();
            for (EventRecord eventInstance = logReader.ReadEvent();
                null != eventInstance; eventInstance = logReader.ReadEvent())
            {
                string msg = string.Format("TimeCreated={2},TaskDisplayName={0}, FormatDescription={1}",
                    eventInstance.TaskDisplayName ,eventInstance.FormatDescription(),eventInstance.TimeCreated);
                this.listBox1.Items.Add(msg);
            } 
        }
        